{"version":3,"sources":["store/index.ts","api/api.ts","api/posts.ts","api/comments.ts","components/Pagination/Pagination.tsx","store/selectors.ts","utils/formatDate.tsx","utils/randomNumber.tsx","components/Preview/Preview.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/PostsList/PostsList.tsx","components/Loader/Loader.tsx","App.tsx","index.tsx"],"names":["ActionType","BASE_URL","getAllUsers","a","fetch","response","ok","Error","status","statusText","json","getPosts","userId","getAllPosts","deletePost","id","method","getComments","postId","delComment","postComment","postid","name","email","homepage","body","headers","JSON","stringify","setPostsAction","createAction","SET_POSTS","setCurrentUserAction","SET_CURRENT_USER","setSelectedPostIdAction","SET_SELECTED_POST_ID","setIsLoadingAction","SET_ISLOADING","setPostTitleAction","SET_POST_TITLE","setFilteredPosts","SET_FILTERED_POSTS","loadUsers","createAsyncThunk","SET_USERS","usersFromServer","loadAllPosts","SET_ALL_POSTS","postsFromServer","loadComments","SET_COMMENTS","commentsFromServer","reducer","createReducer","posts","users","comments","selectedUserId","selectedPostId","isLoading","posttitle","builder","addCase","state","action","payload","pending","fulfilled","store","configureStore","Pagination","total","setCurrentPage","currentPage","useState","isPrevDisabled","setIsPrevDisabled","isNextDisabled","setIsNextDisabled","last","Math","ceil","currentPagination","currPage","lastPage","result","i","max","min","push","unshift","map","value","index","paginate","useEffect","length","className","type","onClick","disabled","item","getUsersSelector","getPostsSelector","getCommentsSelector","getCurrentUserSelector","getSelectedPostIdSelector","getIsLoadingSelector","getPostTitleSelector","getFormatDate","date","currDate","Date","day","getUTCDate","strday","toString","strmonth","getMonth","year","getFullYear","strhours","getHours","strminutes","getMinutes","randomNumber","random","Preview","comment","setShowPreview","src","alt","getTime","ReactHtmlParser","NewCommentForm","dispatch","useDispatch","commentsList","useSelector","setName","setEmail","setComment","error","setError","isverified","setIsVerified","isTextFileFit","setIsTextFileFit","imageFile","setImageFile","textFile","setTextFile","setHomePage","showPreview","addComment","newComment","validateimg","files","fileUpload","RegExp","test","toLowerCase","reader","FileReader","readAsDataURL","onload","e","originImg","Image","target","base64","canvas","document","createElement","img","width","height","round","ctx","getContext","drawImage","compressedData","toDataURL","onerror","err","compressImage","validateEmail","validateUserName","validateHomePage","validateComment","onSubmit","event","preventDefault","required","placeholder","onChange","modules","toolbar","formats","htmlFor","accept","size","readAsText","validateTextFile","sitekey","style","color","PostDetails","postTitle","visiblecomments","setVisiblecomments","findcomments","deletecomment","comm","createdAt","PostsList","kindOfSort","checked","userSelectedId","currentPostList","allUsers","currentListPerPage","setCurrentListPerPage","slice","findposts","sortedArrUser","sortedArrPosts","createdSortedPosts","forEach","filter","post","userid","sort","b","username","localeCompare","sortBy","objUser","user","find","getInfoUser","avatar","undefined","title","Loader","App","setKindOfSort","setCheked","currentUser","Root","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.715bdfda.chunk.js","sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable no-shadow */\nimport {\n  configureStore,\n  createAction,\n  createReducer,\n  createAsyncThunk,\n} from '@reduxjs/toolkit';\nimport {\n  RootState, Post,\n} from '../react-app-env.d';\nimport { getAllUsers } from '../api/api';\nimport { getAllPosts } from '../api/posts';\nimport { getComments } from '../api/comments';\n\nexport enum ActionType {\n  SET_POSTS = 'SET_POSTS',\n  SET_ALL_POSTS = 'SET_ALL_POSTS',\n  SET_USERS = 'SET_USERS',\n  SET_COMMENTS = 'SET_COMMENTS',\n  SET_CURRENT_USER = 'SET_CURRENT_USER',\n  SET_SELECTED_POST_ID = 'SET_SELECTED_POST_ID',\n  SET_ISLOADING = 'SET_ISLOADING',\n  SET_POST_TITLE = 'SET_POST_TITLE',\n  SET_FILTERED_POSTS = 'SET_FILTERED_POSTS',\n}\n\n// Initial state\nconst initialState: RootState = {\n  posts: [],\n  users: [],\n  comments: [],\n  selectedUserId: '0',\n  selectedPostId: 0,\n  isLoading: false,\n  posttitle: '',\n};\n\nexport const setPostsAction = createAction<Post[]>(ActionType.SET_POSTS);\nexport const setCurrentUserAction = createAction<string>(ActionType.SET_CURRENT_USER);\nexport const setSelectedPostIdAction = createAction<number | undefined>(ActionType.SET_SELECTED_POST_ID);\nexport const setIsLoadingAction = createAction<boolean>(ActionType.SET_ISLOADING);\nexport const setPostTitleAction = createAction<string>(ActionType.SET_POST_TITLE);\nexport const setFilteredPosts = createAction<Post[]>(ActionType.SET_FILTERED_POSTS);\n\nexport const loadUsers = createAsyncThunk(ActionType.SET_USERS, async () => {\n  const usersFromServer = await getAllUsers();\n\n  return usersFromServer;\n});\n\nexport const loadAllPosts = createAsyncThunk(\n  ActionType.SET_ALL_POSTS, async () => {\n    const postsFromServer = await getAllPosts();\n\n    return postsFromServer;\n  },\n);\n\nexport const loadComments = createAsyncThunk(\n  ActionType.SET_COMMENTS, async (id: number | undefined) => {\n    const commentsFromServer = await getComments(id);\n\n    return commentsFromServer;\n  },\n);\n\n// rootReducer - this function is called after dispatching an action\nconst reducer = createReducer(initialState, (builder) => {\n  builder.addCase(setPostsAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.posts = action.payload;\n  });\n\n  builder.addCase(setCurrentUserAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.selectedUserId = action.payload;\n  });\n  builder.addCase(setSelectedPostIdAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.selectedPostId = action.payload;\n  });\n  builder.addCase(setIsLoadingAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.isLoading = action.payload;\n  });\n  builder.addCase(setPostTitleAction, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.posttitle = action.payload;\n  });\n\n  builder.addCase(setFilteredPosts, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.posts = action.payload;\n  });\n  builder.addCase(loadUsers.pending, (state) => {\n    // eslint-disable-next-line no-param-reassign\n    state.isLoading = true;\n  });\n\n  builder.addCase(loadUsers.fulfilled, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.users = action.payload;\n    // eslint-disable-next-line no-param-reassign\n    state.isLoading = false;\n  });\n\n  builder.addCase(loadAllPosts.pending, (state) => {\n    // eslint-disable-next-line no-param-reassign\n    state.isLoading = true;\n  });\n\n  builder.addCase(loadAllPosts.fulfilled, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.posts = action.payload;\n    // eslint-disable-next-line no-param-reassign\n    state.isLoading = false;\n  });\n\n  builder.addCase(loadComments.pending, (state) => {\n    // eslint-disable-next-line no-param-reassign\n    state.isLoading = true;\n  });\n\n  builder.addCase(loadComments.fulfilled, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.comments = action.payload;\n    // eslint-disable-next-line no-param-reassign\n    state.isLoading = false;\n  });\n});\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nexport const store = configureStore({\n  reducer,\n});\n// type of dispath, dispatch can get async function\nexport type AppDispatch = typeof store.dispatch;\n","/* eslint-disable no-console */\nexport const BASE_URL = 'http://3.252.200.218:5000';\n\nexport async function getAllUsers() {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n}\n","/* eslint-disable no-console */\nimport { Post } from '../react-app-env.d';\nimport { BASE_URL } from './api';\n// const BASE_URL = 'http://3.252.200.218:5000';\n\nexport async function getPosts(userId: string): Promise<Post[]> {\n  const response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n}\n\nexport async function getPostbyId(postId:number) {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n}\n\nexport async function getAllPosts() {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n}\n\nexport async function deletePost(id : number) {\n  const response = await fetch(`${BASE_URL}/posts/${id}`, { method: 'DELETE' });\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response;\n}\n","import { BASE_URL } from './api';\n// const BASE_URL = 'http://3.252.200.218:5000';\n\nexport async function getComments(postId: number | undefined) {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n}\n\nexport async function delComment(id : number) {\n  const response = await fetch(`${BASE_URL}/comments/${id}`, { method: 'DELETE' });\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response;\n}\n\nexport async function postComment(\n  postid: number | undefined,\n  name : string,\n  email : string,\n  homepage: string,\n  body : string,\n) {\n  const response = await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postid,\n      name,\n      email,\n      homepage,\n      body,\n    }),\n  });\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response;\n}\n","import React, {\n  useEffect,\n  useState,\n} from 'react';\nimport './Pagination.scss';\n\ntype Props = {\n  total: number;\n  setCurrentPage: (arg: number) => void;\n  currentPage: number,\n};\n\nexport const Pagination: React.FC<Props> = (\n  {\n    total,\n    setCurrentPage,\n    currentPage,\n  },\n) => {\n  const [isPrevDisabled, setIsPrevDisabled] = useState(true);\n  const [isNextDisabled, setIsNextDisabled] = useState(false);\n  const last = Math.ceil(total / 25);\n\n  const paginate = (currPage: number, lastPage: number) => {\n    const result = [];\n\n    for (\n      let i = Math.max(2, (currPage - 1));\n      i <= Math.min((lastPage - 1), (currPage + 1));\n      i += 1\n    ) {\n      result.push(i);\n    }\n\n    if ((currPage - 1) > 2) {\n      result.unshift('...');\n    }\n\n    if ((currPage + 1) < (lastPage - 1)) {\n      result.push('...');\n    }\n\n    result.unshift(1);\n    if (lastPage !== 1) {\n      result.push(lastPage);\n    }\n\n    return result.map((value, index) => ({\n      value,\n      id: index + 1,\n    }));\n  };\n\n  const currentPagination = paginate(currentPage, last);\n\n  useEffect(() => {\n    if (currentPage === currentPagination[currentPagination.length - 1].value) {\n      setIsNextDisabled(true);\n    } else {\n      setIsNextDisabled(false);\n    }\n\n    if (currentPage > 1) {\n      setIsPrevDisabled(false);\n    } else {\n      setIsPrevDisabled(true);\n    }\n  }, []);\n\n  return (\n    <div className=\"Pagination\">\n      <div className=\"Pagination__buttons\">\n        <button\n          type=\"button\"\n          onClick={() => {\n            if (currentPage !== 1) {\n              setIsNextDisabled(false);\n              setIsPrevDisabled(false);\n              setCurrentPage(currentPage - 1);\n            } else {\n              setIsPrevDisabled(true);\n            }\n          }}\n          disabled={isPrevDisabled}\n          className=\"Pagination__buttonarrow Pagination__buttonarrow--prev\"\n        >\n          {' '}\n        </button>\n\n        <div className=\"Pagination__buttons-pages\">\n\n          {currentPagination.map(item => {\n            if (item.value === '...') {\n              return (\n                <p\n                  key={item.id}\n                  className=\"Pagination__buttons-dots\"\n                >\n                  {item.value}\n                </p>\n              );\n            }\n\n            return (\n              <button\n                key={item.id}\n                type=\"button\"\n                onClick={() => {\n                  setCurrentPage(+item.value);\n                  if (item.value === 1) {\n                    setIsPrevDisabled(true);\n                  } else {\n                    setIsPrevDisabled(false);\n                  }\n\n                  if (item.value === last) {\n                    setIsNextDisabled(true);\n                  } else {\n                    setIsNextDisabled(false);\n                  }\n                }}\n                className={currentPage === +item.value\n                  ? 'Pagination__button Pagination__button--selected'\n                  : 'Pagination__button'}\n              >\n                {item.value}\n              </button>\n            );\n          })}\n        </div>\n\n        <button\n          id=\"button-next\"\n          type=\"button\"\n          onClick={() => {\n            if (currentPage !== last) {\n              setIsNextDisabled(false);\n              setIsPrevDisabled(false);\n              setCurrentPage(currentPage + 1);\n            } else {\n              setIsNextDisabled(true);\n            }\n          }}\n          disabled={isNextDisabled}\n          className=\"Pagination__buttonarrow Pagination__buttonarrow--next\"\n        >\n          {' '}\n        </button>\n      </div>\n    </div>\n  );\n};\n","import { RootState } from '../react-app-env.d';\n\nexport const getUsersSelector = (state: RootState) => state.users;\nexport const getPostsSelector = (state: RootState) => state.posts;\nexport const getCommentsSelector = (state: RootState) => state.comments;\nexport const getCurrentUserSelector = (\n  state: RootState,\n) => state.selectedUserId;\nexport const getSelectedPostIdSelector = (\n  state: RootState,\n) => state.selectedPostId;\nexport const getIsLoadingSelector = (state: RootState) => state.isLoading;\nexport const getPostTitleSelector = (state: RootState) => state.posttitle;\nexport const getAllPostsSelector = (state: RootState) => state.posts;\n","export function getFormatDate(date: string) {\n  const currDate = new Date(date);\n  const day = currDate.getUTCDate();\n  let strday = day.toString();\n\n  if (strday.length === 1) {\n    strday = `${0}${day}`;\n  }\n\n  const month = currDate.getMonth() + 1;\n  let strmonth = month.toString();\n\n  if (strmonth.length === 1) {\n    strmonth = `${0}${strmonth}`;\n  }\n\n  const year = currDate.getFullYear();\n\n  const hours = currDate.getHours();\n  let strhours = hours.toString();\n\n  if (strhours.length === 1) {\n    strhours = `${0}${strhours}`;\n  }\n\n  const minutes = currDate.getMinutes();\n\n  let strminutes = minutes.toString();\n\n  if (strminutes.length === 1) {\n    strminutes = `${0}${strminutes}`;\n  }\n\n  return `${strday}.${strmonth}.${year} at ${strhours}:${strminutes}`;\n}\n","export function randomNumber() {\n  const number = Math.ceil(Math.random() * 200);\n\n  return number;\n}\n","/* eslint-disable no-console */\nimport React from 'react';\nimport ReactHtmlParser from 'react-html-parser';\nimport { getFormatDate } from '../../utils/formatDate';\nimport { randomNumber } from '../../utils/randomNumber';\nimport 'animate.css';\nimport './Preview.scss';\n\ntype Props = {\n  name: string,\n  email: string,\n  comment: string,\n  setShowPreview: (arg: boolean) => void,\n};\n\nexport const Preview: React.FC<Props> = ({\n  name, email, comment, setShowPreview,\n}) => {\n  return (\n    <div className=\"Preview__container\">\n      <div className=\"Preview__container-content animate__animated animate__fadeInTopRight\">\n        <div className=\"Preview__box-info\">\n          <div className=\"Preview__box-avatar\">\n            <img\n              className=\"Preview__avatar animate__swing\"\n              src={`https://picsum.photos/id/${randomNumber()}/200/300`}\n              alt=\"avatar\"\n            />\n          </div>\n          <h3 className=\"Preview__author\">{name}</h3>\n          <p className=\"Preview__when\">{getFormatDate(new Date().getTime())}</p>\n          <p className=\"Preview__email\"><i>{email}</i></p>\n          <button\n            className=\"Preview__button button\"\n            type=\"button\"\n            onClick={() => {\n              setShowPreview(false);\n            }}\n          >\n            X\n          </button>\n        </div>\n\n        <div className=\"Preview__comment\">\n          <div\n            className=\"Preview__comm-text\"\n          >\n            { ReactHtmlParser(comment) }\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable no-lonely-if */\nimport './NewCommentForm.scss';\nimport React, { FormEvent, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport ReactQuill from 'react-quill';\nimport { NewComment } from '../../react-app-env.d';\nimport { postComment } from '../../api/comments';\n\nimport {\n  getCommentsSelector,\n  getSelectedPostIdSelector,\n} from '../../store/selectors';\nimport { AppDispatch, loadComments } from '../../store';\nimport { Preview } from '../Preview';\n\nexport const NewCommentForm: React.FC = () => {\n  const dispatch: AppDispatch = useDispatch();\n  const commentsList = useSelector(getCommentsSelector);\n  const postId = useSelector(getSelectedPostIdSelector);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [error, setError] = useState(false);\n  const [isverified, setIsVerified] = useState(false);\n  const [isTextFileFit, setIsTextFileFit] = useState(true);\n  const [imageFile, setImageFile] = useState('');\n  const [textFile, setTextFile] = useState('');\n  const [homepage, setHomePage] = useState('');\n  const [showPreview, setShowPreview] = useState(false);\n  const sitekey = '6LcTuKMjAAAAAH99EHMwIJg8G-gtMvEXW29BQffk';\n  const modules = {\n    toolbar: [\n      ['bold', 'italic', 'link', 'code-block'],\n    ],\n  };\n\n  const formats = ['bold', 'italic', 'link', 'code-block'];\n\n  const handleComment = (event: React.SetStateAction<string>) => {\n    setComment(event);\n  };\n\n  function onChange(value: string): void {\n    if (value) {\n      setIsVerified(true);\n    } else {\n      setIsVerified(false);\n    }\n  }\n\n  const addComment = async (newComment: NewComment) => {\n    if (commentsList) {\n      await postComment(\n        newComment.postid,\n        newComment.name,\n        newComment.email,\n        newComment.homepage,\n        newComment.body,\n      );\n\n      dispatch(loadComments(postId));\n    }\n  };\n\n  function compressImage(base64: string) {\n    const canvas = document.createElement('canvas');\n    const img = document.createElement('img');\n\n    img.onload = () => {\n      let { width } = img;\n      let { height } = img;\n      const maxHeight = 240;\n      const maxWidth = 320;\n\n      if (width > height) {\n        if (width > maxWidth) {\n          height = Math.round(height *= maxWidth / width);\n          width = maxWidth;\n        }\n      } else {\n        if (height > maxHeight) {\n          width = Math.round(width *= maxHeight / height);\n          height = maxHeight;\n        }\n      }\n\n      canvas.width = width;\n      canvas.height = height;\n\n      const ctx = canvas.getContext('2d');\n\n      ctx?.drawImage(img, 0, 0, width, height);\n\n      const compressedData = canvas.toDataURL('image/jpeg', 0.7);\n\n      setImageFile(`<img src=${compressedData}>`);\n    };\n\n    img.onerror = (err) => {\n      throw new Error(err.toString());\n    };\n\n    img.src = base64;\n  }\n\n  function validateimg(files: FileList | null) {\n    let fileUpload: File;\n\n    if (files) {\n      [fileUpload] = files;\n\n      const regex = new RegExp('([a-zA-Z0-9_.-])+(.jpe?g|.png|.gif)$');\n\n      if (regex.test(fileUpload.name.toLowerCase())) {\n        if (typeof (fileUpload) !== 'undefined') {\n          const reader = new FileReader();\n\n          reader.readAsDataURL(fileUpload);\n          reader.onload = (e) => {\n            const originImg: HTMLImageElement = new Image();\n\n            if (e.target) {\n              originImg.src = `${e.target.result}`;\n            }\n\n            compressImage(originImg.src);\n          };\n        }\n      }\n    }\n  }\n\n  function validateTextFile(files: FileList | null) {\n    let fileUpload: File;\n\n    if (files) {\n      [fileUpload] = files;\n      const regex = new RegExp('([a-zA-Z0-9_.-])+(.txt)$');\n\n      if ((regex.test(fileUpload.name.toLowerCase())) && (typeof (fileUpload) !== 'undefined')) {\n        if (fileUpload.size <= 100) {\n          setIsTextFileFit(true);\n          const reader = new FileReader();\n\n          reader.readAsText(fileUpload);\n          reader.onload = (e) => {\n            if (e.target) {\n              setTextFile(`${e.target.result}`);\n            }\n          };\n        } else {\n          setIsTextFileFit(false);\n        }\n      }\n    }\n  }\n\n  const submitHandler = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (name && email && comment && commentsList && isverified && isTextFileFit) {\n      const newComment: NewComment = {\n        postid: postId,\n        name,\n        email,\n        homepage,\n        body: `${comment + imageFile}<br>${textFile}`,\n      };\n\n      addComment(newComment);\n      setError(false);\n      setName('');\n      setEmail('');\n      setComment('');\n      setHomePage('');\n    } else {\n      setError(true);\n    }\n  };\n\n  function validateEmail(value: string) {\n    if (!value) {\n      return 'Email is required';\n    }\n\n    const emailPattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n\n    if (!emailPattern.test(value)) {\n      return 'Email is not valid';\n    }\n\n    return 'Email is right';\n  }\n\n  function validateUserName(value: string) {\n    if (!value) {\n      return 'UserName is required';\n    }\n\n    const usernamePattern = /^[a-zA-Z0-9]+$/;\n\n    if (!usernamePattern.test(value)) {\n      return 'UserName is not valid';\n    }\n\n    return 'UserName is right';\n  }\n\n  function validateHomePage(value: string) {\n    if (value === '') {\n      return 'HomePage is not required';\n    }\n\n    const homepagePattern = /[(http(s)?)://(www.)?a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/ig;\n\n    if (!homepagePattern.test(value)) {\n      return 'HomePage is not valid';\n    }\n\n    return 'HomePage is right';\n  }\n\n  function validateComment(value: string) {\n    if (!value) {\n      return 'Comment is required';\n    }\n\n    const commentPattern = /(?!<\\/?((a|code|strong|i|p|em|span)).*?>)<.*?>/g;\n\n    if (commentPattern.test(value)) {\n      return 'You should use allowed tags(a/code/strong/i/p/em/span)';\n    }\n\n    return 'Text of comment is correct';\n  }\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={submitHandler}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          required\n          placeholder=\"UserName\"\n          value={name}\n          className=\"NewCommentForm__input\"\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n        />\n        {(validateUserName(name) === 'UserName is not valid' || validateUserName(name) === 'UserName is required')\n          ? <p className=\"NewCommentForm__validate-username-error\">{validateUserName(name)}</p>\n          : <p className=\"NewCommentForm__validate-username-right\">{validateUserName(name)}</p>}\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          required\n          placeholder=\"E-mail\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n          }}\n        />\n        {(validateEmail(email) === 'Email is not valid' || validateEmail(email) === 'Email is required')\n          ? <p className=\"NewCommentForm__validate-email-error\">{validateEmail(email)}</p>\n          : <p className=\"NewCommentForm__validate-email-right\">{validateEmail(email)}</p>}\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"home-page\"\n          placeholder=\"Home page\"\n          className=\"NewCommentForm__input\"\n          value={homepage}\n          onChange={(event) => {\n            setHomePage(event.target.value);\n          }}\n        />\n        {(validateHomePage(homepage) === 'HomePage is not valid')\n          ? <p className=\"NewCommentForm__validate-homepage-error\">{validateHomePage(homepage)}</p>\n          : <p className=\"NewCommentForm__validate-homepage-right\">{validateHomePage(homepage)}</p>}\n      </div>\n\n      <div className=\"form-field\">\n        <div>\n          <ReactQuill\n            placeholder=\"write comment here\"\n            modules={modules}\n            className=\"NewCommentForm__editor\"\n            formats={formats}\n            value={comment}\n            onChange={handleComment}\n          />\n        </div>\n        {(validateComment(comment) === 'You should use allowed tags(a/code/strong/i/p/em/span)' || validateComment(comment) === 'Comment is required')\n          ? <p className=\"NewCommentForm__validate-comment-error\">{validateComment(comment)}</p>\n          : <p className=\"NewCommentForm__validate-comment-right\">{validateComment(comment)}</p>}\n      </div>\n\n      <div className=\"form-field\">\n        <label\n          htmlFor=\"image-file\"\n          className=\"NewCommentForm__input-file-img-label\"\n        >\n          Choose an image-file to upload\n        </label>\n        <input\n          id=\"image-file\"\n          type=\"file\"\n          name=\"file-img\"\n          accept=\".jpg, .gif, .png\"\n          className=\"NewCommentForm__input-file-img button\"\n          onChange={(event) => {\n            validateimg(event.target.files);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <label\n          htmlFor=\"text-file\"\n          className=\"NewCommentForm__input-file-text-label\"\n        >\n          {isTextFileFit ? 'Choose a text-file to upload' : 'Choose file which is less 100kB'}\n        </label>\n        <input\n          id=\"text-file\"\n          type=\"file\"\n          name=\"file-text\"\n          accept=\".txt\"\n          className=\"NewCommentForm__input-file-text button\"\n          onChange={(event) => {\n            validateTextFile(event.target.files);\n          }}\n        />\n      </div>\n      <button\n        type=\"button\"\n        className=\"NewCommentForm__preview-button button\"\n        onClick={() => {\n          setShowPreview(true);\n        }}\n      >\n        Preview\n      </button>\n      {showPreview && (\n        <Preview\n          name={name}\n          email={email}\n          comment={`${comment + imageFile}<br>${textFile}`}\n          setShowPreview={setShowPreview}\n        />\n      )}\n      <div>\n        <ReCAPTCHA\n          sitekey={sitekey}\n          onChange={onChange}\n          size=\"compact\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n      {error && (\n        <div style={{ color: 'red' }}>\n          Add correct data\n        </div>\n      )}\n    </form>\n  );\n};\n","import React, {\n  useEffect,\n  useState,\n} from 'react';\nimport {\n  useDispatch,\n  useSelector,\n} from 'react-redux';\nimport ReactHtmlParser from 'react-html-parser';\nimport { NewCommentForm } from '../NewCommentForm';\n\nimport './PostDetails.scss';\n\nimport {\n  getCommentsSelector,\n  getPostTitleSelector,\n  getSelectedPostIdSelector,\n} from '../../store/selectors';\nimport {\n  AppDispatch,\n  loadComments,\n} from '../../store';\nimport { delComment } from '../../api/comments';\nimport { getFormatDate } from '../../utils/formatDate';\nimport { randomNumber } from '../../utils/randomNumber';\n\nexport const PostDetails: React.FC = () => {\n  const dispatch: AppDispatch = useDispatch();\n  const postTitle = useSelector(getPostTitleSelector);\n  const commentsList = useSelector(getCommentsSelector);\n\n  const postId = useSelector(getSelectedPostIdSelector);\n  const [visiblecomments, setVisiblecomments] = useState(false);\n\n  const findcomments = async () => {\n    dispatch(loadComments(postId));\n  };\n\n  const deletecomment = async (id: number) => {\n    if (commentsList) {\n      await delComment(id);\n      findcomments();\n    }\n  };\n\n  useEffect(() => {\n    findcomments();\n  }, []);\n\n  return (\n    <div className=\"PostDetails\">\n      <h3 className=\"PostDetails__main-title\">All comments on the post:</h3>\n      {postId !== 0 && (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>\n              Title of post:\n              {' '}\n              <i>{postTitle}</i>\n            </p>\n          </section>\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                setVisiblecomments(!visiblecomments);\n              }}\n            >\n              {visiblecomments\n                ? `Show ${commentsList.length} comments`\n                : `Hide ${commentsList.length} comments`}\n            </button>\n            <ul\n              className={visiblecomments\n                ? 'PostDetails__visiblelist'\n                : 'PostDetails__list'}\n            >\n              {commentsList.map(comm => {\n                return (\n                  <li\n                    className=\"PostDetails__list-item\"\n                    key={comm.id}\n                  >\n                    <div className=\"PostDetails__box-info\">\n                      <div className=\"PostDetails__box-avatar\">\n                        <img\n                          className=\"PostDetails__avatar\"\n                          src={`https://picsum.photos/id/${randomNumber()}/200/300`}\n                          alt=\"avatar\"\n                        />\n                      </div>\n                      <h3 className=\"PostDetails__author\">{comm.name}</h3>\n                      <p className=\"PostDetails__when\">{getFormatDate(comm.createdAt)}</p>\n                      <p className=\"PostDetails__email\"><i>{comm.email}</i></p>\n                    </div>\n                    <div className=\"PostDetails__comm-button\">\n                      <div\n                        className=\"PostDetails__comm-text\"\n                      >\n                        { ReactHtmlParser(comm.body) }\n                      </div>\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => {\n                          deletecomment(comm.id);\n                        }}\n                      >\n                        X\n                      </button>\n                    </div>\n                  </li>\n                );\n              })}\n            </ul>\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm />\n            </div>\n          </section>\n        </>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useEffect,\n  useState,\n} from 'react';\nimport './PostsList.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Pagination } from '../Pagination';\nimport { deletePost, getPosts } from '../../api/posts';\nimport {\n  getCurrentUserSelector,\n  getPostsSelector,\n  getSelectedPostIdSelector,\n  getUsersSelector,\n} from '../../store/selectors';\nimport {\n  AppDispatch,\n  loadAllPosts,\n  loadComments,\n  setFilteredPosts,\n  setIsLoadingAction,\n  setPostsAction,\n  setPostTitleAction,\n  setSelectedPostIdAction,\n} from '../../store';\nimport { PostDetails } from '../PostDetails';\nimport {\n  Post,\n  User,\n} from '../../react-app-env.d';\nimport { getFormatDate } from '../../utils/formatDate';\n\ntype Props = {\n  kindOfSort: string;\n  checked: boolean;\n};\n\nexport const PostsList: React.FC<Props> = ({ kindOfSort, checked }) => {\n  const dispatch: AppDispatch = useDispatch();\n  const userSelectedId = useSelector(getCurrentUserSelector);\n  const postId = useSelector(getSelectedPostIdSelector);\n  const currentPostList = useSelector(getPostsSelector);\n  const allUsers = useSelector(getUsersSelector);\n\n  const total = currentPostList.length;\n  const [\n    currentListPerPage,\n    setCurrentListPerPage,\n  ] = useState(currentPostList);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  useEffect(() => {\n    setCurrentListPerPage(currentPostList\n      .slice(0 + (currentPage - 1) * 25, 25 * currentPage));\n  }, [currentPage, currentPostList]);\n\n  function sortBy() {\n    let sortedArrUser: User[] = [];\n    const sortedArrPosts: Post[] = [];\n\n    function createdSortedPosts() {\n      sortedArrUser.forEach(item => sortedArrPosts.push(...currentPostList.filter(post => post.userid === item.id)));\n    }\n\n    switch (kindOfSort) {\n      case '1':\n        if (checked) {\n          sortedArrUser = [...allUsers].sort((a, b) => b.username.localeCompare(a.username));\n        } else {\n          sortedArrUser = [...allUsers].sort((a, b) => a.username.localeCompare(b.username));\n        }\n\n        createdSortedPosts();\n        dispatch(setFilteredPosts(sortedArrPosts));\n\n        break;\n      case '2':\n        if (checked) {\n          sortedArrUser = [...allUsers].sort((a, b) => b.email.localeCompare(a.email));\n        } else {\n          sortedArrUser = [...allUsers].sort((a, b) => a.email.localeCompare(b.email));\n        }\n\n        createdSortedPosts();\n        dispatch(setFilteredPosts(sortedArrPosts));\n\n        break;\n      case '3':\n        if (checked) {\n          sortedArrUser = [...allUsers].sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n        } else {\n          sortedArrUser = [...allUsers].sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n        }\n\n        createdSortedPosts();\n        dispatch(setFilteredPosts(sortedArrPosts));\n\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  const findposts = async () => {\n    const result = await getPosts(userSelectedId);\n\n    dispatch(setPostsAction(result));\n    dispatch(setIsLoadingAction(false));\n  };\n\n  function getInfoUser(userId: number) {\n    let date = '';\n    const user = allUsers.find((item: User) => item.id === userId);\n\n    if (user) {\n      if (user?.createdAt) {\n        date = getFormatDate(user?.createdAt);\n      }\n    }\n\n    return { user, date };\n  }\n\n  useEffect(() => {\n    findposts();\n\n    if (userSelectedId === '0') {\n      dispatch(loadAllPosts());\n    }\n  }, [userSelectedId]);\n\n  useEffect(() => {\n    sortBy();\n  }, [kindOfSort, checked]);\n\n  return (\n    <div className=\"PostsList\">\n\n      <h2>Posts:</h2>\n      <ul\n        className=\"PostsList__list\"\n      >\n        {currentListPerPage.map(post => {\n          const objUser = getInfoUser(post.userid);\n\n          return (\n            <li\n              className=\"PostsList__item\"\n              key={post.id}\n            >\n              <div className=\"PostsList__box-info\">\n                <div className=\"PostsList__box-left\">\n                  <div className=\"PostsList__box-avatar\">\n                    <img\n                      className=\"PostsList__avatar\"\n                      src={objUser.user?.avatar}\n                      alt=\"avatar\"\n                    />\n                  </div>\n                  <h3 className=\"PostsList__author\">{objUser.user?.name}</h3>\n                  <p className=\"PostsList__when\">{objUser.date}</p>\n                  <p className=\"PostsList__email\"><i>{objUser.user?.name}</i></p>\n                </div>\n                <div className=\"PostsList__box-button PostsList__box-right\">\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => {\n                      if (postId === post.id) {\n                        dispatch(setSelectedPostIdAction(undefined));\n                      } else {\n                        dispatch(setSelectedPostIdAction(post.id));\n                        dispatch(setPostTitleAction(post.title));\n                        dispatch(loadComments(post.id));\n                      }\n                    }}\n                  >\n                    {postId === post.id ? 'Close' : '✚ Comment'}\n                  </button>\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={async () => {\n                      await deletePost(post.id);\n                      dispatch(loadAllPosts());\n                    }}\n                  >\n                    ✖ Post\n                  </button>\n                </div>\n              </div>\n              <p className=\"PostsList__text-post\">\n                {post.body}\n              </p>\n              {postId === post.id && (\n                <div className=\"App__content\">\n                  <PostDetails />\n                </div>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n      <Pagination\n        total={total}\n        setCurrentPage={setCurrentPage}\n        currentPage={currentPage}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  AppDispatch,\n  loadUsers,\n  loadAllPosts,\n  setCurrentUserAction,\n  setIsLoadingAction,\n} from './store';\nimport { PostsList } from './components/PostsList';\nimport {\n  getCurrentUserSelector,\n  getIsLoadingSelector,\n  getUsersSelector,\n} from './store/selectors';\nimport { Loader } from './components/Loader';\nimport { User } from './react-app-env.d';\n\nconst App: React.FC = () => {\n  const dispatch: AppDispatch = useDispatch();\n  const users = useSelector(getUsersSelector);\n  const userSelectedId = useSelector(getCurrentUserSelector);\n  const isLoading = useSelector(getIsLoadingSelector);\n  const [kindOfSort, setKindOfSort] = useState('0');\n  const [checked, setCheked] = useState(true);\n  const currentUser = useSelector(getCurrentUserSelector);\n\n  useEffect(() => {\n    dispatch(loadUsers());\n    dispatch(loadAllPosts());\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <div className=\"App__container-filters\">\n          <div className=\"App__box-user-selector\">\n            <p>Select a user: &nbsp;</p>\n            <select\n              className=\"App__selector\"\n              value={currentUser}\n              onChange={(event) => {\n                dispatch(setCurrentUserAction(event.target.value));\n                dispatch(setIsLoadingAction(true));\n              }}\n            >\n              <option value=\"0\">All users</option>\n              {users.map((user: User) => (\n                <option\n                  key={user.id}\n                  value={`${user.id}`}\n                >\n                  {user.username}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"App__box-sort-selector\">\n            <p>Sort by: &nbsp;</p>\n            <select\n              className=\"App__selector\"\n              value={kindOfSort}\n              disabled={userSelectedId !== '0'}\n              onChange={(event) => {\n                setKindOfSort(event.target.value);\n              }}\n            >\n              <option value=\"0\" disabled>Choose one</option>\n              <option value=\"1\">Username</option>\n              <option value=\"2\">Email</option>\n              <option value=\"3\">Date</option>\n            </select>\n          </div>\n          <div className=\"App__box-label-checkbox\">\n            <label\n              htmlFor=\"checkbox\"\n              className=\"App__label-checkbox\"\n            >\n              <input\n                id=\"checkbox\"\n                type=\"checkbox\"\n                disabled={userSelectedId !== '0'}\n                onChange={() => {\n                  setCheked(!checked);\n                }}\n              />\n              {!checked ? 'A ➡ Z or 1 ➡ 10' : 'Z ➡ A or 10 ➡ 1'}\n            </label>\n          </div>\n        </div>\n\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {isLoading && <Loader />}\n          <PostsList\n            kindOfSort={kindOfSort}\n            checked={checked}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { store } from './store';\nimport App from './App';\nimport 'animate.css';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}